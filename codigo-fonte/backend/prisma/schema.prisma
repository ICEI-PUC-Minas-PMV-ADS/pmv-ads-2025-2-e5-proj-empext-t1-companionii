// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  COLLABORATOR
  CLIENT
}

enum UserStatus {
  INVITED
  PENDING_APPROVAL
  ACTIVE
  SUSPENDED
  DISABLED
}

enum BoardStatus {
  TODO
  REVIEW
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum IntegrationType {
  GITHUB
  TRELLO
  RENDER
  NETLIFY
}

enum OAuthProvider {
  GOOGLE
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(ADMIN)
  status       UserStatus @default(ACTIVE)
  imageUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  companies      Company[]
  reports        Report[]
  integrations   Integration[]
  accounts       Account[]
  passwordResets PasswordResetToken[]
  invites        Invite[] @relation("InvitedBy")

  companyMembers  CompanyMember[]
  projectMembers  ProjectMember[]
  createdProjects Project[]  @relation("ProjectCreatedBy")
  createdTasks    Task[]     @relation("TaskCreatedBy")
  assignedTasks   Task[]     @relation("TaskAssignee")
}

model Account {
  id                 String         @id @default(uuid())
  userId             String
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider           OAuthProvider
  providerAccountId  String
  
  accessToken        String?
  refreshToken       String?
  expiresAt          DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model PasswordResetToken {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String @unique
  expiresAt DateTime
  consumedAt DateTime?
  createdAt DateTime @default(now())


  @@index([userId])
}

model Invite {
  id          String @id @default(uuid())
  email       String
  role        Role @default(COLLABORATOR)
  companyId   String?
  invitedById String
  invitedBy   User @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)
  tokenHash   String @unique
  expiresAt   DateTime
  acceptedAt  DateTime?
  revokedAt   DateTime?
  createdAt   DateTime @default(now())


  @@index([email])
}

model Company {
  id          String   @id @default(uuid())
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name        String
  colorHex    String   @default("#3498db")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reports        Report[]
  integrations   Integration[]
  projects       Project[]
  members        CompanyMember[]
}

model CompanyMember {
  userId    String
  companyId String
  role      Role      @default(COLLABORATOR)
  joinedAt  DateTime  @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@index([companyId])
  @@index([userId])
}

model Project {
  id           String   @id @default(uuid())
  name         String
  description  String?
  colorHex     String   @default("#8b5cf6")
  companyId    String
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdById  String?
  createdBy    User?    @relation("ProjectCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tasks        Task[]
  members      ProjectMember[]
  tags         Tag[]

  @@index([companyId])
  @@index([createdById])
}

model ProjectMember {
  userId    String
  projectId String
  role      Role     @default(COLLABORATOR)
  joinedAt  DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@index([projectId])
  @@index([userId])
}

model Task {
  id           String       @id @default(uuid())
  projectId    String
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  title        String
  description  String?

  status          BoardStatus  @default(TODO)
  priority        TaskPriority @default(MEDIUM)
  statusChangedAt DateTime?
  position        Int          @default(0)
  dueDate         DateTime?
  estimatedMin    Int?
  actualMin       Int? @default(0)
  startedAt       DateTime?
  completedAt     DateTime?

  createdById  String?
  createdBy    User?        @relation("TaskCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  assigneeId   String?
  assignee     User?        @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  tags         TaskTag[]
  timeLogs     TaskTimeLog[]

  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([assigneeId])
  @@index([dueDate])
}

model Tag {
  id         String   @id @default(uuid())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name       String
  colorHex   String   @default("#22c55e")
  createdAt  DateTime @default(now())

  tasks      TaskTag[]

  @@unique([projectId, name])
  @@index([projectId])
}

model TaskTag {
  taskId String
  tagId  String

  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@index([tagId])
}

model TaskTimeLog {
  id          String   @id @default(uuid())
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  startTime   DateTime
  endTime     DateTime?
  durationMin Int?
  notes       String?
  createdAt   DateTime @default(now())

  @@index([taskId])
  @@index([startTime])
}

model Report {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId    String?
  company      Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  title        String
  aiSummary    String?
  periodStart  DateTime
  periodEnd    DateTime
  totalTasks   Int      @default(0)
  totalMinutes Int      @default(0)
  pdfPath      String?
  generatedAt  DateTime @default(now())
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([companyId])
  @@index([periodStart, periodEnd])
}

model Integration {
  id              String          @id @default(uuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId       String?
  company         Company?        @relation(fields: [companyId], references: [id], onDelete: SetNull)
  integrationType IntegrationType
  externalId      String?
  configData      Json?
  isActive        Boolean         @default(true)
  lastSyncAt      DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([userId])
  @@index([companyId])
  @@index([integrationType])
}
