// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  COLLABORATOR
  CLIENT
}

enum UserStatus {
  INVITED
  PENDING_APPROVAL
  ACTIVE
  SUSPENDED
  DISABLED
}

enum TaskStatus {
  FUTURE
  TODAY
  IN_PROGRESS
  COMPLETED
  PAST
}

enum IntegrationType {
  GITHUB
  TRELLO
  RENDER
  NETLIFY
}

enum OAuthProvider {
  GOOGLE
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(ADMIN)
  status       UserStatus @default(ACTIVE)
  imageUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  companies      Company[]
  dailyTasks     DailyTask[]
  reports        Report[]
  integrations   Integration[]
  accounts       Account[]
  passwordResets PasswordResetToken[]
  invites        Invite[] @relation("InvitedBy")
}

model Account {
  id                 String         @id @default(uuid())
  userId             String
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider           OAuthProvider
  providerAccountId  String
  
  accessToken        String?
  refreshToken       String?
  expiresAt          DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model PasswordResetToken {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String @unique
  expiresAt DateTime
  consumedAt DateTime?
  createdAt DateTime @default(now())


  @@index([userId])
}

model Invite {
  id          String @id @default(uuid())
  email       String
  role        Role @default(COLLABORATOR)
  companyId   String?
  invitedById String
  invitedBy   User @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)
  tokenHash   String @unique
  expiresAt   DateTime
  acceptedAt  DateTime?
  revokedAt   DateTime?
  createdAt   DateTime @default(now())


  @@index([email])
}

model Company {
  id          String   @id @default(uuid())
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name        String
  colorHex    String   @default("#3498db")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  dailyTasks     DailyTask[]
  reports        Report[]
  integrations   Integration[]
}

model DailyTask {
  id           String         @id @default(uuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId    String?
  company      Company?       @relation(fields: [companyId], references: [id], onDelete: SetNull)
  title        String
  description  String?
  status       TaskStatus     @default(FUTURE)
  taskDate     DateTime
  estimatedMin Int            @default(30)
  actualMin    Int            @default(0)
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  timeLogs TimeLog[]

  @@index([userId])
  @@index([companyId])
  @@index([taskDate])
  @@index([status])
}

model Report {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId    String?
  company      Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  title        String
  aiSummary    String?
  periodStart  DateTime
  periodEnd    DateTime
  totalTasks   Int      @default(0)
  totalMinutes Int      @default(0)
  pdfPath      String?
  generatedAt  DateTime @default(now())
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([companyId])
  @@index([periodStart, periodEnd])
}

model TimeLog {
  id          String    @id @default(uuid())
  dailyTaskId String
  dailyTask   DailyTask @relation(fields: [dailyTaskId], references: [id], onDelete: Cascade)
  startTime   DateTime
  endTime     DateTime?
  durationMin Int?
  notes       String?
  createdAt   DateTime  @default(now())

  @@index([dailyTaskId])
  @@index([startTime])
}

model Integration {
  id              String          @id @default(uuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId       String?
  company         Company?        @relation(fields: [companyId], references: [id], onDelete: SetNull)
  integrationType IntegrationType
  externalId      String?
  configData      Json?
  isActive        Boolean         @default(true)
  lastSyncAt      DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([userId])
  @@index([companyId])
  @@index([integrationType])
}
